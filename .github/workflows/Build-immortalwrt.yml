name: 🔧 ImmortalWrt AutoBuilder

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  push:
    paths:
      - 'config/*'

jobs:
  config:
    name: ⚙️ Load Configuration
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: 🛬 Checkout Repository
      uses: actions/checkout@v4

    - name: 🔍 Validate Config Files
      run: |
        if [ ! -f "config/devices.json" ] || [ ! -f "config/version.json" ]; then
          echo "::error::Missing config files!"
          exit 1
        fi
        echo "Config files validation passed ✅"

    - name: 📋 Read Configuration
      id: set-matrix
      run: |
        if jq -e '.devices' config/devices.json >/dev/null 2>&1; then
          DEVICES=$(jq -r '.devices[]' config/devices.json)
        else
          DEVICES=$(jq -r '.[]' config/devices.json)
        fi
        
        VERSION=$(jq -r '.version' config/version.json)
        
        MATRIX_JSON=$(jq -n -c \
          --argjson devices "$(jq -n -c --arg in "$DEVICES" '$in | split("\n") | map(select(. != ""))')" \
          --arg version "$VERSION" \
          '{
            include: $devices | map({
              device: .,
              version: $version
            })
          }')
        
        echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
        echo "::notice::Build matrix generated for $VERSION: $MATRIX_JSON"

  build-firmware:
    name: 🔨 Build ${{ matrix.device }}
    needs: config
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.config.outputs.matrix) }}
      fail-fast: false

    steps:
    - name: 🛬 Checkout Repository
      uses: actions/checkout@v4

    - name: 📅 Get Build Date
      id: get-date
      run: echo "date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

    - name: 🔧 Setup Build Environment
      run: |
        sudo apt-get update -y
        sudo apt-get install -y \
          build-essential libncurses5-dev zlib1g-dev \
          gawk git gettext libssl-dev xsltproc wget unzip python3 jq zstd

    - name: 🗺️ Determine Target Architecture
      id: target
      run: |
        DEVICE="${{ matrix.device }}"
        
        declare -A DEVICE_TARGETS=(
          ["glinet_gl-mt3000"]="mediatek/filogic"
          ["glinet_gl-mt6000"]="mediatek/filogic"
          ["xiaomi_redmi-router-ax6000"]="mediatek/filogic"
          ["xiaomi_mi-router-3g"]="ramips/mt7621"
          ["netgear_r7800"]="ipq806x/generic"
          ["linksys_wrt3200acm"]="mvebu/cortexa9"
          ["tplink_archer-c7-v5"]="ath79/generic"
        )
        
        if [[ -n "${DEVICE_TARGETS[$DEVICE]}" ]]; then
          TARGET="${DEVICE_TARGETS[$DEVICE]}"
        else
          echo "::error::Unknown device type: $DEVICE"
          exit 1
        fi
        
        echo "target=$TARGET" >> $GITHUB_OUTPUT
        echo "sanitized_target=${TARGET//\//-}" >> $GITHUB_OUTPUT
        echo "::notice::Target for $DEVICE: $TARGET"

    - name: ⬇️ Download ImageBuilder
      run: |
        SANITIZED_TARGET="${{ steps.target.outputs.sanitized_target }}"
        VERSION="${{ matrix.version }}"
        
        BASE_URL="https://downloads.immortalwrt.org/releases/$VERSION/targets/${{ steps.target.outputs.target }}"
        
        URLS=(
          "$BASE_URL/immortalwrt-imagebuilder-$VERSION-$SANITIZED_TARGET.Linux-x86_64.tar.zst"
          "$BASE_URL/immortalwrt-imagebuilder-$SANITIZED_TARGET.Linux-x86_64.tar.zst"
          "$BASE_URL/immortalwrt-imagebuilder-$VERSION-$SANITIZED_TARGET.Linux-x86_64.tar.xz"
          "$BASE_URL/immortalwrt-imagebuilder-$SANITIZED_TARGET.Linux-x86_64.tar.xz"
        )
        
        FOUND=0
        for URL in "${URLS[@]}"; do
          echo "🔍 Checking: $URL"
          if wget -q --spider "$URL"; then
            echo "✅ Found valid ImageBuilder at: $URL"
            wget -O imagebuilder.tar.zst "$URL"
            FOUND=1
            break
          fi
        done
        
        if [ "$FOUND" -eq 0 ]; then
          echo "::error::ImageBuilder not found at any URL"
          for URL in "${URLS[@]}"; do
            echo "::error::Tried: $URL"
          done
          exit 1
        fi

    - name: 📦 Extract ImageBuilder
      run: |
        if file imagebuilder.tar.zst | grep -q "Zstandard"; then
          echo "🔧 Extracting Zstandard archive"
          tar -I zstd -xf imagebuilder.tar.zst
        elif file imagebuilder.tar.zst | grep -q "XZ"; then
          echo "🔧 Extracting XZ archive"
          tar -xJf imagebuilder.tar.zst
        else
          echo "::error::Unknown archive format"
          exit 1
        fi
        
        mv immortalwrt-imagebuilder-* imagebuilder
        echo "✅ ImageBuilder extracted successfully"

    - name: 📦 Prepare Packages
      id: packages
      run: |
        CUSTOM_PKG_FILE="config/packages_${{ matrix.device }}.txt"
        DEFAULT_PKG_FILE="config/default_packages.txt"
        
        if [ -f "$CUSTOM_PKG_FILE" ]; then
          echo "::notice::Using custom packages for ${{ matrix.device}}"
          # 过滤掉空行和注释行
          PACKAGES=$(grep -vE '^#|^$' "$CUSTOM_PKG_FILE" | tr '\n' ' ')
        elif [ -f "$DEFAULT_PKG_FILE" ]; then
          echo "::notice::Using default packages"
          PACKAGES=$(grep -vE '^#|^$' "$DEFAULT_PKG_FILE" | tr '\n' ' ')
        else
          echo "::error::No package list found!"
          exit 1
        fi
        
        # 添加必要的基础包
        BASE_PKGS="luci luci-theme-bootstrap -dnsmasq dnsmasq-full"
        FULL_PKGS="$BASE_PKGS $PACKAGES"
        
        echo "📦 Packages to install: $FULL_PKGS"
        echo "PACKAGES=$FULL_PKGS" >> $GITHUB_ENV

    - name: 🔍 Validate Packages
      run: |
        cd imagebuilder
        echo "🔍 Validating packages using package list..."
        
        # 获取可用包列表（新方法）
        if [ -f "repositories.conf" ]; then
          echo "📋 Using repositories.conf for package list"
          # 从所有源获取包列表
          AVAILABLE_PACKAGES=$(find . -name Packages | xargs cat | grep -E "^Package: " | awk '{print $2}' | sort -u)
        elif [ -f "packages/Packages.manifest" ]; then
          echo "📋 Using Packages.manifest for package list"
          AVAILABLE_PACKAGES=$(awk '{print $1}' packages/Packages.manifest | sort -u)
        else
          echo "::warning::No package list found, skipping validation"
          exit 0
        fi
        
        # 检查每个包是否可用
        for PKG in $PACKAGES; do
          # 跳过排除的包（以-开头）
          if [[ $PKG == -* ]]; then
            continue
          fi
          
          if ! echo "$AVAILABLE_PACKAGES" | grep -q -w "$PKG"; then
            echo "::error::Package $PKG is not available in this ImageBuilder"
            echo "::error::Available packages: $(echo "$AVAILABLE_PACKAGES" | head -n 5 | tr '\n' ' ')..."
            exit 1
          else
            echo "✅ Package $PKG is available"
          fi
        done
        
        echo "🎉 All packages are valid"

    - name: 🔨 Build Firmware
      run: |
        cd imagebuilder
        echo "🚀 Building firmware for ${{ matrix.device }} with packages: $PACKAGES"
        
        # 显示可用配置
        if [ -f "Makefile" ]; then
          make info || true
        fi
        
        # 增加构建详细日志
        if ! make image PROFILE="${{ matrix.device }}" PACKAGES="$PACKAGES" FILES="../files/" V=s; then
          echo "::error::Build failed for ${{ matrix.device }}"
          
          # 收集错误日志
          if [ -d "logs" ]; then
            ERRORS=$(grep -i 'error\|failed\|undefined' logs/*.log | head -n 20 || true)
          else
            ERRORS="No logs directory found"
          fi
          
          echo "::error::Build errors:"
          echo "$ERRORS"
          
          exit 1
        fi
        
        echo "✅ Build completed successfully"

    - name: 🗜️ Archive Artifacts
      run: |
        mkdir -p ../artifacts/${{ matrix.device }}
        cp bin/targets/*/*/*.bin ../artifacts/${{ matrix.device }}/
        echo "DEVICE=${{ matrix.device }}" >> $GITHUB_ENV
        echo "ARTIFACT_DIR=artifacts/${{ matrix.device }}" >> $GITHUB_ENV
        echo "::notice::Artifacts stored in artifacts/${{ matrix.device }}"

    - name: 🚀 Upload Release
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.ARTIFACT_DIR }}/*.bin
        tag_name: build-${{ github.run_id }}-${{ matrix.device }}
        name: "Build ${{ github.run_number }} (${{ matrix.device }})"
        body: |
          ### 🚀 ImmortalWrt Firmware Build
          **Device**: ${{ matrix.device }}
          **Version**: ${{ matrix.version }}
          **Build ID**: ${{ github.run_id }}
          **Build Date**: ${{ steps.get-date.outputs.date }}

          🔧 Built with GitHub Actions
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
